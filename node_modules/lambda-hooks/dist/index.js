"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hooks_1 = require("./hooks");
exports.handleScheduledEvent = hooks_1.handleScheduledEvent;
exports.handleUnexpectedError = hooks_1.handleUnexpectedError;
exports.logEvent = hooks_1.logEvent;
exports.parseEvent = hooks_1.parseEvent;
/**
 * Using the provided hooks create an withHooks higher order function
 * @param hooks a config object of the hooks to apply to your lambda
 * @param hooks.before an array of hooks to run before the provided lambda
 * @param hooks.after an array of hooks to run after the provided lambda
 * @param hooks.onError an array of hooks to run only if there's an error during the execution
 * @returns WithHooks() function that wraps around your lambda
 */
exports.useHooks = (hooks, config = {}) => {
    if (!hooks.before)
        hooks.before = [];
    if (!hooks.after)
        hooks.after = [];
    if (!hooks.onError)
        hooks.onError = [];
    /**
     * Higher order function that takes a lambda function
     * as input and applies the hooks provided to useHooks()
     * @param handler lambda function
     * @returns supercharged lambda  ðŸš€
     */
    const withHooks = (handler) => async (event, context) => {
        var _a;
        let state = { event, context, exit: false, config };
        try {
            for (const hook of hooks.before) {
                state = await hook(state);
                if (state.exit)
                    return state.response;
            }
            state.response = await handler(state.event, state.context);
            if (((_a = hooks === null || hooks === void 0 ? void 0 : hooks.after) === null || _a === void 0 ? void 0 : _a.length) === 0)
                return state.response;
            for (const hook of hooks.after) {
                state = await hook(state);
                if (state.exit)
                    return state.response;
            }
        }
        catch (error) {
            state.error = error;
            for (const hook of hooks.onError) {
                state = await hook(state);
                if (state.exit)
                    return state.response;
            }
        }
        return state.response;
    };
    return withHooks;
};
exports.default = exports.useHooks;
